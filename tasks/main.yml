---

- name: Include version-specific variables for Ubuntu.
  include_vars: "{{ ansible_distribution }}-{{ ansible_distribution_version }}.yml"
  when: ansible_distribution == 'Ubuntu'
- name: Include version-specific variables for RedHat
  include_vars: "RedHat-{{ ansible_distribution_version.split('.')[0] }}.yml"
  when: ansible_os_family == "RedHat" or ansible_distribution == 'CentOS' or ansible_distribution == 'Red Hat Enterprise Linux'
## must be last to override previous vars
- name: Include webserver+distribution-specific variables
  include_vars: "{{ misp_webserver }}-{{ ansible_distribution }}.yml"

- include: debian.yml
  when: ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu'

- include: redhat.yml
  when: ansible_os_family == "RedHat" or ansible_distribution == 'CentOS' or ansible_distribution == 'Red Hat Enterprise Linux'

- debug: var=misp_webserver
- include: nginx.yml
  when: misp_webserver is defined and misp_webserver == 'nginx'

- name: Ensure services are enabled and started
  service: "name={{ item }} state=started enabled=yes"
  with_items: "{{ misp_services }}"

- name: check installed pear packages
  command: pear list
  register: pearinstalled
  changed_when: false
- name: updated access to pear.php.net
  command: pear channel-update pear.php.net
  when: pearinstalled.stdout.find("Crypt_GPG") == -1
- name: install php pear dependencies
  pear: name={{item}} state=present
  with_items:
    - Crypt_GPG
    - Net_GeoIP

## https://github.com/ansible/ansible-modules-core/issues/2697
- name: install python dependencies with pip
#  pip: name="{{ item }}" extra_args='--no-input'
  pip: name="{{ item }}" extra_args='--exists-action=w'
  with_items:
    - pyzmq
#    - git+https://github.com/CybOXProject/python-cybox.git@v2.1.0.12#egg=Package
## FIXME! ValueError: ("Missing 'Version:' header and/or PKG-INFO file", cybox [unknown version] (/tmp/src/package))
#    - git+https://github.com/stixproject/python-stix.git@v1.2.0.0#egg=Package
    - git+https://github.com/MISP/PyMISP.git#egg=Package
    - cybox
    - stix

- stat: path={{ misp_rootdir }}/INSTALL
  register: m
- name: git clone MISP
  git: repo=https://github.com/MISP/MISP.git
       dest={{ misp_rootdir }}
       version={{ misp_version }}
#       track_submodules=yes
  when: not m.stat.exists

## must be after git cloning MISP
- include: apache2.yml
  when: misp_webserver is not defined or misp_webserver == 'apache2'

## https://github.com/kosssi/ansible-role-gitconfig ?
- name: get git config
  command: "git config core.filemode chdir={{ misp_rootdir }}"
  changed_when: false
  register: gc
- name: setting core.filemode for git
  command: "git config core.filemode false chdir={{ misp_rootdir }}"
  when: gc.stdout != 'false'

- stat: path={{ misp_rootdir }}/app/files/scripts/python-stix/setup.py
  register: ps
- name: git clone python-stix
  git: repo=https://github.com/STIXProject/python-stix.git
       dest={{ misp_rootdir }}/app/files/scripts/python-stix
       version=v1.2.0.0
  when: not ps.stat.exists
- stat: path=/usr/local/lib/python2.7/dist-packages/stix-1.2.0.0-py2.7.egg
  register: psegg
- name: setup python-stix
  command: "python setup.py install chdir={{ misp_rootdir }}/app/files/scripts/python-stix"
  when: not psegg.stat.exists

- name: define composer.json to use composer install module
  copy: src=composer.json dest={{ misp_rootdir }}/app/composer.json mode=0644
## FIXME! no better way to do that?
- name: Download Composer installer.
  get_url:
    url: https://getcomposer.org/installer
    dest: /tmp/composer-installer.php
    mode: 0755
    sha256sum: 5af00ed7dbe47d849eca28cd44b6064d34b362ce20ba465652d72b4d121134b1
- name: install composer
  shell: "php -q /tmp/composer-installer.php --install-dir=/usr/local/bin --filename=composer"
  args:
    creates: /usr/local/bin/composer
- name: install PHP dependencies via composer (kamisama/cake-resque, Vendor)
  composer: command=install working_dir={{ misp_rootdir }}/app

### https://github.com/geerlingguy/ansible-role-php-pecl/blob/master/tasks/main.yml
### FIXME! pecl/redis requires PHP (version >= 7.0.0, version <= 7.1.0, excluded versions: 6.0.0)
#- name: Install PECL libaries.
#  shell: "yes \"\" | pecl install {{ item }}"
#  register: pecl_result
#  changed_when: "pecl_result.rc == 0"
#  failed_when: "not (('already installed' in pecl_result.stdout) or ('install ok:' in pecl_result.stdout))"
#  with_items:
#    - redis
#  when: ansible_os_family == "RedHat" or ansible_distribution == 'CentOS' or ansible_distribution == 'Red Hat Enterprise Linux'

- name: setup MISP Cake config
  command: "rsync -ci {{ misp_rootdir }}/INSTALL/setup/config.php {{ misp_rootdir }}/app/Plugin/CakeResque/Config/config.php"
  register: rsync_result
  changed_when: 'rsync_result.stdout != ""'

- name: validate permissions
  file: "dest={{ item.f }} mode={{ item.m }} owner={{ www_user }} group={{ www_user }} state=directory"
  with_items:
    - { f: "{{ misp_rootdir }}", m: '0755' }
    - { f: "{{ misp_rootdir }}/app/files", m: '2775' }
    - { f: "{{ misp_rootdir }}/app/files/scripts/tmp", m: '2775' }
    - { f: "{{ misp_rootdir }}/app/Plugin/CakeResque/tmp", m: '0775' }
    - { f: "{{ misp_rootdir }}/app/Config", m: '0750' }
    - { f: "{{ misp_rootdir }}/.gnupg", m: '0700' }
    - { f: "{{ misp_rootdir }}/app/webroot", m: '0700' }
- name: check owner/group for multiple MISP folders
  file: "dest={{ item }} owner={{ www_user }} group={{ www_user }} state=directory mode=2755"
#  with_fileglob:
#    - {{ misp_rootdir }}/app/files/scripts/tmp/*
#    - {{ misp_rootdir }}/app/files/scripts/tmp/cache/*
#    - {{ misp_rootdir }}/app/files/scripts/tmp/cached_exports/*
  with_items:
    - "{{ misp_rootdir }}/app/tmp/"
    - "{{ misp_rootdir }}/app/tmp/sessions"
    - "{{ misp_rootdir }}/app/tmp/cache"
    - "{{ misp_rootdir }}/app/tmp/cache/models"
    - "{{ misp_rootdir }}/app/tmp/cache/persistent"
    - "{{ misp_rootdir }}/app/tmp/cache/views"
    - "{{ misp_rootdir }}/app/tmp/tests"
    - "{{ misp_rootdir }}/app/tmp/logs"
    - "{{ misp_rootdir }}/app/tmp/files"
    - "{{ misp_rootdir }}/app/tmp/cached_exports"
    - "{{ misp_rootdir }}/app/tmp/cached_exports/md5"
    - "{{ misp_rootdir }}/app/tmp/cached_exports/suricata"
    - "{{ misp_rootdir }}/app/tmp/cached_exports/text"
    - "{{ misp_rootdir }}/app/tmp/cached_exports/snort"
    - "{{ misp_rootdir }}/app/tmp/cached_exports/sha1"
    - "{{ misp_rootdir }}/app/tmp/cached_exports/csv_sig"
    - "{{ misp_rootdir }}/app/tmp/cached_exports/csv_all"
    - "{{ misp_rootdir }}/app/tmp/cached_exports/xml"
    - "{{ misp_rootdir }}/app/tmp/cached_exports/rpz"
- stat: path="{{ misp_rootdir }}/app/tmp/debug.log"
  register: debuglog
- name: touch debug.log
  file: "dest={{ misp_rootdir }}/app/tmp/debug.log mode=0644 owner={{ www_user }} group={{ www_user }} state=touch"
  when: not debuglog.stat.exists


- include: mysql-configure.yml

- name: extra php settings
  template: "src=misp-php.ini.j2 dest={{ php_confdir }}/misp-php.{{ php_confext }} mode=0644"
- name: Enforce Timezone in php.ini
  replace: "dest={{ php_ini }} regexp='^;date.timezone =' replace='date.timezone = {{ tz }}'"
- name: enabling MISP php settings
  file: "src={{ php_confdir }}/misp-php.ini dest={{ php_confenable }}/99-misp.ini state=link"
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu') and (misp_webserver is not defined or misp_webserver == 'apache2')

- stat: path={{ misp_rootdir }}/app/Config/bootstrap.php
  register: conffiles
- name: create config files from default
  command: "rsync -ci --chown={{ www_user }} {{ misp_rootdir }}/app/Config/{{ item }}.default.php {{ misp_rootdir }}/app/Config/{{ item }}.php"
  register: rsync_result
  changed_when: 'rsync_result.stdout != ""'
  with_items:
    - bootstrap
    - database
    - core
## done later
#    - config
  when: not conffiles.stat.exists and (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu')
- name: create config files from default
  command: "rsync -ci {{ misp_rootdir }}/app/Config/{{ item }}.default.php {{ misp_rootdir }}/app/Config/{{ item }}.php"
  register: rsync_result
  changed_when: 'rsync_result.stdout != ""'
  with_items:
    - bootstrap
    - database
    - core
#    - config
  when: not conffiles.stat.exists and not (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu')
- name: ensure right permissions for conf files
  file: "dest={{ misp_rootdir }}/app/Config/{{ item }}.php owner={{ www_user }} mode=0600"
  with_items:
    - bootstrap
    - database
    - core
#    - config

- name: update database settings
  replace: dest={{ misp_rootdir }}/app/Config/database.php regexp="{{ item.regexp }}" replace="{{ item.replace }}"
  with_items:
    - { regexp: 'db login', replace: "{{ misp_db_user }}" }
    - { regexp: 'db password', replace: "{{ misp_db_pass }}" }
- name: set CakeResque bootstrap to true
  lineinfile: dest={{ misp_rootdir }}/app/Config/bootstrap.php line="CakePlugin::loadAll(array( 'CakeResque' => array('bootstrap' => true) ));"
- name: add vendor/autoload.php to core
  lineinfile: 'dest={{ misp_rootdir }}/app/Config/core.php line="{{ item }}"'
  with_items:
    - "require_once dirname(__DIR__) . '/Vendor/autoload.php';"


- name: Generating salt
  shell: "openssl rand -base64 32 | sed 's@[=\\/\\+]@@g;' | tee {{ misp_rootdir }}/.salt creates={{ misp_rootdir }}/.salt"
  register: salt1
  changed_when: false
  tags:
    - salt
- stat: path="{{ misp_rootdir }}/.salt"
  register: s
- name: Recover existing salt
  command: "cat {{ misp_rootdir }}/.salt"
  changed_when: false
  register: salt2
  when: s.stat.exists
- set_fact:
    salt: "{{ salt1.stdout }}"
  when: salt1.changed
- set_fact:
    salt: "{{ salt2.stdout }}"
  when: s.stat.exists
- name: updating MISP config
  template: src=config.php.j2 dest="{{ misp_rootdir }}/app/Config/config.php" mode=0600 backup=yes owner="{{ www_user }}"
  tags:
    - salt

- stat: "path={{ misp_rootdir }}/app/webroot/gpg.asc"
  register: gkey
- name: create gpg configuration template
  template: "src=gpg-template.j2 dest=/var/tmp/gpg-template owner={{ www_user }} mode=0600"
  when: not gkey.stat.exists
- name: redhat | start gpg-agent
  command: "gpg-agent --daemon --homedir={{ misp_rootdir }}/.gnupg"
  become: yes
  become_user: "{{ www_user }}"
  when: not gkey.stat.exists and (ansible_os_family == "RedHat" or ansible_distribution == 'CentOS' or ansible_distribution == 'Red Hat Enterprise Linux') and misp_webserver == 'nginx'
  ignore_errors: true
- name: create gnupg key for {{ misp_email }}
  shell: "{{ item }} chdir={{ misp_rootdir }}/.gnupg"
  with_items:
    - "gpg --homedir {{ misp_rootdir }}/.gnupg --gen-key --batch /var/tmp/gpg-template"
    - "gpg --homedir {{ misp_rootdir }}/.gnupg --export --armor {{ misp_email }} --batch > {{ misp_rootdir }}/app/webroot/gpg.asc"
  become: yes
  become_user: "{{ www_user }}"
  when: not gkey.stat.exists
## it seems to be done by gpg
#- command: wipe -q -y /var/tmp/gpg-template
#  when: not gkey.stat.exists

- name: validate worker start.sh permissions
  file: dest={{ misp_rootdir }}/app/Console/worker/start.sh mode=0755

- block:
    - name: docker redis workaround ???
      replace: "dest=/etc/systemd/system/redis.service regexp={{ item.re }} replace={{ item.rep }} backup=yes"
      with_items:
        - { re: '^PrivateTmp=yes', rep: 'PrivateTmp=no' }
        - { re: '^PrivateDevices=yes', rep: 'PrivateDevices=no' }
#        - { re: '^', rep: '' }
  when: ansible_virtualization_type is defined and ansible_virtualization_type == "docker" and ansible_distribution == "Ubuntu" and ansible_distribution_release == 'xenial'
- name: ensure redis is active before launching worker
  service: name={{ redis_svc }} state=started

- name: check if worker active
  command: "ps axu"
  register: ps
  changed_when: false
#- debug: var=ps.stdout_lines
- name: start MISP worker
  command: "bash {{ misp_rootdir }}/app/Console/worker/start.sh"
  become: yes
  become_user: "{{ www_user }}"
  when: ps.stdout.find("{{ misp_rootdir }}/app/Vendor/kamisama/php-resque-ex") == -1

- name: add MISP worker script for boot
  lineinfile: dest=/etc/rc.local line="sudo -H -u www-data bash {{ misp_rootdir }}/app/Console/worker/start.sh" insertbefore="exit 0"

- stat: path={{ mispmodules_rootdir }}/misp-modules
  register: mm
- name: git clone MISP modules
  git: repo=https://github.com/MISP/misp-modules.git
       dest={{ mispmodules_rootdir }}/misp-modules
  when: not mm.stat.exists

## FIXME! pip3 bug in centos7
- name: install pip3 dependencies for MISP modules
  pip: requirements={{ mispmodules_rootdir }}/misp-modules/REQUIREMENTS executable=pip3
  when: ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu'

- include: testing.yml
  when: misp_testing is defined and misp_testing

## FIXME! how to do it once only!
## Note: more a reset as next login, will ask to change password...
- stat: path="{{ misp_rootdir }}/.admin_pass_set"
  register: ap
- name: set admin password
  command: "{{ misp_rootdir }}/app/Console/cake Password admin@admin.test \"{{ misp_web_pass }}\""
  when: not ap.stat.exists
- name: Admin pass set market
  file: dest="{{ misp_rootdir }}/.admin_pass_set" state=touch
  when: not ap.stat.exists

- block:
    - name: set extra users
      command: "{{ misp_rootdir }}/app/Console/cake Password {{ item.u }} \"{{ item.p }}\""
      with_items: "{{ misp_webusers_list }}"
  when: misp_webusers_list is defined and misp_webusers_list != ""

